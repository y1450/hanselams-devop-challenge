from abc import ABC, abstractmethod
import os.path
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import base64
from dataclasses import dataclass
from bs4 import BeautifulSoup
from typing import List


@dataclass
class Email:
    sender: str
    recipent: str
    subject: str
    message: str


class EmailProvider(ABC):
    @abstractmethod
    def authencate_user(self):
        """
        Authorize the user
        and get permision from user to do
        task on user behalf eg. send email, filter message.
        """
        pass

    @abstractmethod
    def send_email(self, to, subject, message):
        """
        send emails from sender to reciept with subject and message in the body.
        """
        pass

    @abstractmethod
    def filter_email(self, keywords)->List[Email]:
        pass


class GmailProvider:
    def __init__(
        self,
    ):
        self.authencate_user()

    def authencate_user(self):
        scopes = [
            "https://www.googleapis.com/auth/gmail.readonly",
            "https://www.googleapis.com/auth/gmail.send",
        ]
        creds = None
        # The file token.json stores the user's access and refresh tokens, and is
        # created automatically when the authorization flow completes for the first
        # time.
        if os.path.exists("token.json"):
            creds = Credentials.from_authorized_user_file("token.json", scopes)
        # If there are no (valid) credentials available, let the user log in.
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    "credentials.json", scopes
                )
                creds = flow.run_local_server(port=0)
            # Save the credentials for the next run
            with open("token.json", "w") as token:
                token.write(creds.to_json())
        try:
            # Call the Gmail API
            self.service = build("gmail", "v1", credentials=creds)
        except HttpError as error:
            # TODO(developer) - Handle errors from gmail API.
            print(f"An error occurred: {error}")
        except Exception as e:
            raise e

    def filter_messages(self, keywords: List[str]) -> List[Email]:
        """
        filter emails based on keywords found in subject or body of the email.
        :param keywords: list to keyword to filter on. 
        :return: results  , list of emails
        :raises HTTPError: generated by Gmail API if there an invalid request is sent.
        """

        query = " OR ".join(["subject:" + k for k in keywords] + keywords)
        results = []
        try:
            filter_messages = (
                self.service.users().messages().list(userId="me", q=query).execute()
            )
        except HTTPError as error:
            raise error
        for msg in filter_messages["messages"]:
            # Get the message from its id
            txt = (
                self.service.users().messages().get(userId="me", id=msg["id"]).execute()
            )
            try:
                payload = txt["payload"]
                headers = payload["headers"]
                # Look for Subject and Sender Email in the headers
                for d in headers:
                    if d["name"] == "Subject":
                        subject = d["value"]
                    if d["name"] == "From":
                        sender = d["value"]
                parts = payload.get("parts")[0]
                message = ""
                if parts["body"]["size"] > 0:
                    data = parts["body"]["data"]
                    data = data.replace("-", "+").replace("_", "/")
                    message = str(base64.b64decode(data))
                    results.append(Email(sender, "me", subject, message))
            except Exception as e:
                raise e
        return results

    def send_email(self, to: str, subject: str, message: str):
        """
        Send an email to sender `to` with subject and message
        """
        # Create the email message
        msg = MIMEMultipart()
        msg["to"] = to
        msg["subject"] = subject
        msg.attach(MIMEText(message))
        # Encode the message and send it
        raw_msg = base64.urlsafe_b64encode(msg.as_bytes()).decode("utf-8")
        msg = {"raw": raw_msg}
        try:
            self.service.users().messages().send(userId="me", body=msg).execute()
        except HttpError as error:
            # TODO(developer) - Handle errors from gmail API.
            print(f"An error occurred: {error}")


if __name__ == "__main__":
    print("Welcome to GMAIL API")
    gmail_api_service = GmailProvider()
    gmail_api_service.send_email(
        "sunny.rahul@tutanota.com", "Send through GMAIL API", "Here is text in the body"
    )
    keywords = ["Learn", "Found"]
    emails = gmail_api_service.filter_messages(keywords)
    print("number of emails found", len(emails))
    print(
        f"Found {len(emails)} messages: matching keywords \"{','.join(keywords)}\" in subject or message body"
    )
    for email in emails:
        print("From :", email.sender)
        print("Subject:", email.subject)
        print("")
